[{"body":"Overview This component powers the action pages including reset password, verify email and restore email, which are Firebase authentication templates. The default pathname of these pages is /auth-action. To customise your Firebase templates, go to your Firebase project authentication → Templates, then click on the Edit Template button, and then click on “Customize action URL”. Use https://www.yourdomain.com/auth-action as the custom action URL and replace www.yourdomain.com with your actual application domain.\nSource Code https://github.com/fireactjs/core/blob/main/src/lib/components/auth/ActionPages.js\n","categories":"","description":"This is the component to power customised Firebase action pages.\n","excerpt":"This is the component to power customised Firebase action pages.\n","ref":"/docs/core-package/components/actionpages/","tags":"","title":"ActionPages"},{"body":"Overview Each subscription account can have multiple users. This is the component to invite new and existing users of the system to access the subscription account with the assigned permission roles.\nScreenshot Props Prop Name Description setAddUserActive The state of AddUser component is loaded in the parent component. Set false to unload the component. setUsers The state of the user list in the parent component. After a user is invited, the user will be appended to the users state. Source Code https://github.com/fireactjs/saas/blob/main/src/lib/components/AddUser.js\n","categories":"","description":"The component to invite users to a subscription account.\n","excerpt":"The component to invite users to a subscription account.\n","ref":"/docs/saas-package/components/adduser/","tags":"","title":"AddUser"},{"body":"Overview AppTemplate is a template component that controls the layout of the logged-in state of your application. It has a few props for customizing the interface such as your logo and brand name, menu etc. Below is a screenshot of the component and the positions of the props.\nScreenshot Props Prop Name Description logo This is the logo component to be displayed in the top-left of the layout drawerMenu This is the main menu in the left sidebar. See component for example. toolbarChildren These are the child components in the left part of the toolbar toolBarMenu This is the toolbar menu component in the right part of the toolbar. See component for example. Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/templates/AppTemplate.js\n","categories":"","description":"This is the template component for the logged-in state application.\n","excerpt":"This is the template component for the logged-in state application.\n","ref":"/docs/core-package/components/apptemplate/","tags":"","title":"AppTemplate"},{"body":"Overview This is the component to confirm and cancel the subscription account. It requires the admin user of the subscription account to input the subscription ID to confirm before cancelling the subscription, to avoid cancellation by mistake.\nScreenshot Source Code https://github.com/fireactjs/saas/blob/main/src/lib/components/CancelSubscription.js\n","categories":"","description":"The component to cancel the subscription account.\n","excerpt":"The component to cancel the subscription account.\n","ref":"/docs/saas-package/components/cancelsubscription/","tags":"","title":"CancelSubscription"},{"body":"Overview This is the component to show the subscription plans with the PricingPlans component for the owner of the subscription account to change the subscription plan. If a payment method is attached to the subscription account, the component will change the subscription with the attached payment method, otherwise, it will show the PaymentMethodForm component to set up the payment method for the subscription.\nScreenshot Source Code https://github.com/fireactjs/saas/blob/main/dist/components/ChangePlan.js\n","categories":"","description":"The component to change the subscription plan.\n","excerpt":"The component to change the subscription plan.\n","ref":"/docs/saas-package/components/changeplan/","tags":"","title":"ChangePlan"},{"body":"Overview AuthProvider is an invisible component to wrap the whole application and detects if the current user has signed in. It stores the user state in a context variable and passes it to the children elements.\nContext Variables The context variables AuthProvider offers to the children components.\nProp Name Description authUser The JSON object contains the user data. authUser.user contains the current user data if the user has signed in or null for users who haven’t signed in. authUser.data is a JSON for custom data object you need to store for the current user. authUser.checked indicates if the status of the current user has been checked. setAuthUser This sets the authUser context variable. fireabaseApp This is the Firebase app variable that can be reused in the children components Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/Auth.js\n","categories":"","description":"This component checks the user’s logged-in state and passes the data to the children components via context variables.\n","excerpt":"This component checks the user’s logged-in state and passes the data to the children components via context variables.\n","ref":"/docs/core-package/components/authprovider/","tags":"","title":"AuthProvider"},{"body":"Overview This component shows the subscription plans with the PricingPlans component. If the chosen plan is a paid plan, it loads the PaymentMethodForm component to set up the payment method for the subscription account. Once the subscription account is created, it redirects the user to the subscription settings page.\nScreenshot Source Code https://github.com/fireactjs/saas/blob/main/dist/components/CreateSubscription.js\n","categories":"","description":"The component to choose a subscription plan and create a subscription account.\n","excerpt":"The component to choose a subscription plan and create a subscription account.\n","ref":"/docs/saas-package/components/createsubscription/","tags":"","title":"CreateSubscription"},{"body":"Install from NPM To install the fireactjs-core components, create your Reactjs project first, and then run npm i @fireactjs/core to install the components.\nnpx create-react-app my-app cd my-app npm i @fireactjs/core @mui/material @emotion/react @emotion/styled For details on how to create a Reactjs application, please see https://reactjs.org/docs/create-a-new-react-app.html\nSetup your Firebase project As @fireactjs/core is built on Firebase and Reactjs, you will need to have a Firebase project. Go to the Firebase website and create a project.\nCreate a web app In your Firebase Project settings → General, click the “Add app” button to create a new web app. You will the instructions on installing the firebase npm package and a JSON configuration named firebaseConfig which you will need to configure your @fireactjs application.\nCreate a file called firebaseConfig.json in the /src folder and copy the firebaseConfig JSON to the file similar to the format below.\n{ \"apiKey\": \"...\", \"authDomain\": \"...\", \"projectId\": \"...\", \"storageBucket\": \"...\", \"messagingSenderId\": \"...\", \"appId\": \"...\" } Enable authentication methods After you create your Firebase project, go to the project console and enable the authentication methods you plan to use for your web application (Firebase Console \u003e Project Settings \u003e Build \u003e Authentication \u003e Sign-in method \u003e Sign-in providers). Note that @fireactjs/core supports the following authentication methods:\nEmail and password Google Facebook Microsoft Twitter Github Apple Some of the authentication methods require you to register your web application in the authentication platforms (e.g. Facebook). Please make sure you complete the necessary steps to enable the authentication methods.\nCreate a file called authMethods.json in the /src folder and copy the following JSON to the file, then set the authentication methods that you enabled to true otherwise to false.\n{ \"google\": true, \"facebook\": true, \"microsoft\": true, \"apple\": true, \"twitter\": true, \"github\": true } Initialize your Firebase project Run firebase login to sign in to your Firebase account and then run firebase init to initialize Firestore for your project locally (select Firestore: Configure security rules and indexes files for Firestore)\nUpdate Firestore rules Update your firebase.rules with the code below.\nrules_version = '2'; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if false; } match /users/{userId} { allow read, update, create: if request.auth.uid == userId; } } } Modify App.js Replace the code in your src/App.js with the code below.\nimport { pathnames, ActionPages, AppTemplate, AuthProvider, AuthRoutes, FireactProvider, MainMenu, PublicTemplate, ResetPassword, SignIn, SignUp, UserMenu, UserProfile, UserUpdateEmail, UserUpdateName, UserUpdatePassword, UserDelete } from '@fireactjs/core'; import { BrowserRouter, Routes } from \"react-router-dom\"; import { Route } from \"react-router-dom\"; import LocalFireDepartmentIcon from '@mui/icons-material/LocalFireDepartment'; import { CircularProgress, Box } from '@mui/material'; import './App.css'; import firebaseConfig from \"./firebaseConfig.json\"; import authMethods from \"./authMethods.json\"; const Logo = ({size, color}) =\u003e { const logoColor = color || 'warning'; return ( \u003cLocalFireDepartmentIcon color={logoColor} fontSize={size} /\u003e ); } const Loader = ({size}) =\u003e { let cpSize = \"35px\"; switch(size){ case \"small\": cpSize = \"30px\"; break; case \"medium\": cpSize = \"35px\"; break; case \"large\": cpSize = \"45px\"; break; default: cpSize = \"35px\"; break; } return ( \u003cBox sx={{ display: 'flex', justifyContent: \"center\", alignItems: \"center\"}}\u003e \u003cCircularProgress color=\"warning\" size={cpSize} /\u003e \u003cdiv style={{position: \"absolute\" }}\u003e \u003cLogo size={size} /\u003e \u003c/div\u003e \u003c/Box\u003e ); } function App() { const config = { firebaseConfig: firebaseConfig, brand: \"FIREACTJS\", pathnames: pathnames, authProviders: authMethods } return ( \u003cFireactProvider config={config}\u003e \u003cAuthProvider\u003e \u003cBrowserRouter\u003e \u003cRoutes\u003e \u003cRoute element={\u003cAuthRoutes loader={\u003cLoader size=\"large\" /\u003e} /\u003e} \u003e \u003cRoute element={\u003cAppTemplate logo={\u003cLogo size=\"large\" /\u003e} toolBarMenu={\u003cUserMenu /\u003e} drawerMenu={\u003cMainMenu /\u003e} /\u003e}\u003e \u003cRoute exact path=\"/\" element={\u003c\u003e\u003c/\u003e} /\u003e \u003cRoute exact path={pathnames.UserProfile} element={\u003cUserProfile /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdateEmail} element={\u003cUserUpdateEmail /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdateName} element={\u003cUserUpdateName /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdatePassword} element={\u003cUserUpdatePassword /\u003e} /\u003e \u003cRoute exact path={pathnames.UserDelete} element={\u003cUserDelete /\u003e} /\u003e \u003c/Route\u003e \u003c/Route\u003e \u003cRoute element={\u003cPublicTemplate /\u003e}\u003e \u003cRoute path={pathnames.SignIn} element={ \u003cSignIn logo={\u003cLogo size=\"large\" /\u003e} /\u003e } /\u003e \u003cRoute path={pathnames.SignUp} element={ \u003cSignUp logo={\u003cLogo size=\"large\" /\u003e} /\u003e } /\u003e \u003cRoute path={pathnames.ResetPassword} element={ \u003cResetPassword logo={\u003cLogo size=\"large\" /\u003e} /\u003e } /\u003e \u003cRoute path={pathnames.ActionPages} element={ \u003cActionPages logo={\u003cLogo size=\"large\" /\u003e} /\u003e } /\u003e \u003c/Route\u003e \u003c/Routes\u003e \u003c/BrowserRouter\u003e \u003c/AuthProvider\u003e \u003c/FireactProvider\u003e ) } export default App; Replace Brand and Logo to customise the logo and the brand of your web application.\nFor further customisation, please read the documentation.\nUpdate Firebase template action URL (Optional) Go to your Firebase project authentication → Templates, then click on the Edit Template button, and then click on “Customize action URL”. Use https://www.yourdomain.com/auth-action as the custom action URL and replace www.yourdomain.com with your actual application domain.\nRun your app locally By now, your app is ready for the first run locally. Use the command npm start to start the app.\nDeploy to Firebase After testing locally, your app is ready to be deployed to Firebase hosting.\nBuild Run npm run build to build your app\nDeploy Run firebase init to initialize Firebase hosting for your project (select Hosting: Configure files for Firebase Hosting and (optionally) set up GitHub Action deploys) and then run firebase deploy to deploy your app to Firebase. If you see a blank screen in your production URL, make sure you set the build (and not public) as the folder in your Firebase settings (firebase.json).\n","categories":"","description":"Instructions for installing Fireactjs and creating your Reactjs application with the Fireactjs framework.\n","excerpt":"Instructions for installing Fireactjs and creating your Reactjs application with the Fireactjs framework.\n","ref":"/docs/core-package/installation/","tags":"","title":"Installation"},{"body":"Create Reactjs App with Fireactjs Core Before installing the Fireactjs SaaS packages, you must set up your Reactjs application with the Fireactjs Core package for user authentication. Read Fireactjs Installation Guide.\nInstall from NPM The Fireactjs SaaS project comes with two packages: @fireacjts/saas for the Reactjs front-end and @fireactjs/saas-cloud-functions for the server-side Firebase Cloud Functions.\nIn your Reactjs app root folder, use the following command to install the @fireactjs/saas package:\nnpm i @fireactjs/saas In your /functions folder where your Firebase Cloud Functions are located, use the following command to install the @fireactjs/saas-cloud-functions package:\nnpm i @fireactjs/saas-cloud-functions Setup Payment Plans Fireactjs SaaS integrates with Stripe to handle subscription payments. You must have a Stripe account to enable the integration.\nIn Stripe, create products for your SaaS. Each product can have multiple prices. However, these prices must have the same billing period.\nCreate a JSON to describe your plans as the example below. Each plan must have an unique id to identify the plan. A plan can contain multiple price IDs from different products in Stripe. In this example, the “enterprise” plan contains two prices which are from two products: license and support.\nIf the free property is set to true for a plan, the plan will not ask for putting in a credit card. Make sure that all the prices in the plan are “0” in price in Stripe.\nIf a plan is no longer available for new users, set its legacy property to true and the plan will not be shown in the pricing table.\n[ { \"id\": \"free\", \"title\": \"Free\", \"popular\": false, \"priceIds\": [ \"price_1...\" ], \"currency\": \"$\", \"price\": 0, \"frequency\": \"week\", \"description\": [ \"10 users included\", \"2 GB of storage\", \"Help center access\", \"Email support\" ], \"free\": true, \"legacy\": false }, { \"id\": \"pro\", \"title\": \"Pro\", \"popular\": true, \"priceIds\": [ \"price_2...\" ], \"currency\": \"$\", \"price\": 10, \"frequency\": \"week\", \"description\": [ \"20 users included\", \"10 GB of storage\", \"Help center access\", \"Priority email support\" ], \"free\": false, \"legacy\": false }, { \"id\": \"enterprise\", \"title\": \"Enterprise\", \"popular\": false, \"priceIds\": [ \"price_3...\", \"price_4...\" ], \"currency\": \"$\", \"price\": 30, \"frequency\": \"week\", \"description\": [ \"50 users included\", \"30 GB of storage\", \"Help center access\", \"Phone \u0026 email support\" ], \"free\": false, \"legacy\": false }, { \"id\": \"legcy\", \"title\": \"Gold\", \"popular\": true, \"priceIds\": [ \"price_2...\" ], \"currency\": \"$\", \"price\": 10, \"frequency\": \"week\", \"description\": [ \"20 users included\", \"10 GB of storage\", \"Help center access\", \"Priority email support\" ], \"free\": false, \"legacy\": true } ] Setup Stripe Integration For the cloud functions to receive data from Stripe, you will need to create a webhook endpoint with the cloud function webhook URL https://firebase-location-project-id.cloudfunctions.net/fireactjsSaas-stripeWebHook. Please make sure you replace the domain with your actual Firebase project cloud function domain. Once the webhook is created, you will get an endpoint secret which is needed in the configuration file.\nThe following Stripe events need to be sent to the endpoint:\ncustomer.subscription.updated customer.subscription.trial_will_end customer.subscription.pending_update_expired customer.subscription.pending_update_applied customer.subscription.deleted customer.subscription.created invoice.created invoice.deleted invoice.finalized invoice.marked_uncollectible invoice.paid invoice.payment_action_required invoice.payment_failed invoice.payment_succeeded invoice.sent invoice.updated invoice.voided Create /src/config.json File Create a file called config.json in the /src folder as the example shows below store the configuration settings.\nTo integrate with Stripe, the Stripe public API key is required for the stripe.pubblic_api_key property.\nThe Reactjs application needs the price_id from Stripe to integrate with the Stripe payment plans. The plans will be shown in the pricing table as the property values in the JSON plans. It’s important that the priceId property value of each plan matches the plan’s price_id in Stripe.\n{ \"stripe\": { \"public_api_key\": \"pk_test_...\" }, \"plans\": [ { \"id\": \"free\", \"title\": \"Free\", \"popular\": false, \"priceIds\": [ \"price_1...\" ], \"currency\": \"$\", \"price\": 0, \"frequency\": \"week\", \"description\": [ \"10 users included\", \"2 GB of storage\", \"Help center access\", \"Email support\" ], \"free\": true, \"legacy\": false }, { \"id\": \"pro\", \"title\": \"Pro\", \"popular\": true, \"priceIds\": [ \"price_2...\" ], \"currency\": \"$\", \"price\": 10, \"frequency\": \"week\", \"description\": [ \"20 users included\", \"10 GB of storage\", \"Help center access\", \"Priority email support\" ], \"free\": false, \"legacy\": false }, { \"id\": \"enterprise\", \"title\": \"Enterprise\", \"popular\": false, \"priceIds\": [ \"price_3...\", \"price_4...\" ], \"currency\": \"$\", \"price\": 30, \"frequency\": \"week\", \"description\": [ \"50 users included\", \"30 GB of storage\", \"Help center access\", \"Phone \u0026 email support\" ], \"free\": false, \"legacy\": false }, { \"id\": \"legcy\", \"title\": \"Gold\", \"popular\": true, \"priceIds\": [ \"price_2...\" ], \"currency\": \"$\", \"price\": 10, \"frequency\": \"week\", \"description\": [ \"20 users included\", \"10 GB of storage\", \"Help center access\", \"Priority email support\" ], \"free\": false, \"legacy\": true } ], \"permissions\": { \"access\": { \"default\": true, \"admin\": false }, \"admin\": { \"default\": false, \"admin\": true } }, \"subscription\": { \"singular\": \"project\", \"plural\": \"projects\" } } Create /functions/config.json File In the /functions folder, create a config.json file as the example shows below.\nYou will need to put in the stripe secret API key and the endpoint secret in the configuration file to integrate the cloud functions with Stripe.\nPlans are also needed for the cloud functions similar to the Reactjs application.\nFor sending new user invites, the mailgun JSON is needed. The details are covered in the next section.\n{ \"brand\": \"My Brand\", \"site_name\": \"My SaaS App\", \"site_url\": \"https://app.mydomain.com\", \"sign_in_url\": \"https://app.mydomain.com/sign-in\", \"sign_up_url\": \"https://app.mydomain.com/sign-up\", \"stripe\": { \"secret_api_key\": \"sk_test_...\", \"end_point_secret\": \"whsec_...\" }, \"plans\": [ { \"id\": \"free\", \"title\": \"Free\", \"popular\": false, \"priceIds\": [ \"price_1...\" ], \"currency\": \"$\", \"price\": 0, \"frequency\": \"week\", \"description\": [ \"10 users included\", \"2 GB of storage\", \"Help center access\", \"Email support\" ], \"free\": true, \"legacy\": false }, { \"id\": \"pro\", \"title\": \"Pro\", \"popular\": true, \"priceIds\": [ \"price_2...\" ], \"currency\": \"$\", \"price\": 10, \"frequency\": \"week\", \"description\": [ \"20 users included\", \"10 GB of storage\", \"Help center access\", \"Priority email support\" ], \"free\": false, \"legacy\": false }, { \"id\": \"enterprise\", \"title\": \"Enterprise\", \"popular\": false, \"priceIds\": [ \"price_3...\", \"price_4...\" ], \"currency\": \"$\", \"price\": 30, \"frequency\": \"week\", \"description\": [ \"50 users included\", \"30 GB of storage\", \"Help center access\", \"Phone \u0026 email support\" ], \"free\": false, \"legacy\": false }, { \"id\": \"legcy\", \"title\": \"Gold\", \"popular\": true, \"priceIds\": [ \"price_2...\" ], \"currency\": \"$\", \"price\": 10, \"frequency\": \"week\", \"description\": [ \"20 users included\", \"10 GB of storage\", \"Help center access\", \"Priority email support\" ], \"free\": false, \"legacy\": true } ], \"permissions\": { \"access\": { \"default\": true, \"admin\": false }, \"admin\": { \"default\": false, \"admin\": true } }, \"mailgun\": { \"api_key\": \"...\", \"domain\": \"app.mydomain.com\", \"from\": \"No Reply \u003cno-reply@app.mydomain.com\u003e\", \"templates\":{ \"invite_email\": \"invite\" } } } Setup Mailgun Integration (optional) The framework integrates with Mailgun to send invite emails when users are invited to join subscription accounts. To setup the integration, retrieve the API key from Mailgun and create a file called mailgun.json under the src folder as the example below shows.\n{ \"api_key\": \"...\", \"domain\": \"app.mydomain.com\", \"from\": \"No Reply \u003cno-reply@app.mydomain.com\u003e\", \"templates\":{ \"invite_email\": \"invite\" } In Mailgun, you will need a template for the invite emails. Create a template called invite with the subject line below.\n{{sender}} invited you to {{site_name}} In the template body, use the following copy.\nHi {{name}}, You received this invite because {{sender}} invited you to join {{site_name}}. Please sign in ({{sign_in_url}}) to accept the invite. If you don't have a user account yet, please sign up ({{sign_up_url}}) here. Best regards, The {{site_name}} team The invite template supports the following variables:\n{{sender}} - the name of the person who sends the invite {{site_name}} - the name of your web application defined in the cloud function configurations {{name}} - the name of the new user who is invited by the sender {{sign_in_url}} - the URL to the sign-in page which is defined in the cloud function configurations {{sign_up_url}} - the URL to the sign-up page which is defined in the cloud function configurations Note: The invite email is optional for the invite process. You can skip this step but the new users will need to be informed by other methods so that they know where to sign up and sign in to accept the invites.\nUpdate Firestore Rules The SaaS package uses Firestore database to store and manage the subscription data. To secure the data, the following Firestore rules need to be added to your Firestore database rules.\nmatch /users/{userId}/paymentMethods/{paymentMethodId} { allow read, update, create, delete: if request.auth.uid == userId; } match /subscriptions/{subscriptionId} { allow read: if request.auth.uid != null \u0026\u0026 request.auth.uid in resource.data.permissions.access; allow update: if request.auth.uid != null \u0026\u0026 request.auth.uid in resource.data.permissions.admin \u0026\u0026 (!request.resource.data.diff(resource.data).affectedKeys() .hasAny(['currency', 'ownerId', 'paymentCycle', 'paymentMethod', 'plan', 'price', 'stripeItems', 'stripeSubscriptionId', 'subscriptionCreated', 'subscriptionCurrentPeriodEnd', 'subscriptionCurrentPeriodStart', 'subscriptionEnded', 'subscriptionStatus'])); } match /subscriptions/{subscriptionId}/invoices/{invoiceId} { allow read: if request.auth.uid != null \u0026\u0026 request.auth.uid in get(/databases/$(database)/documents/subscriptions/$(subscriptionId)).data.permissions.admin; } match /invites/{inviteId} { allow read, delete: if request.auth.uid != null \u0026\u0026 request.auth.token.email == resource.data.email; } Modify /src/App.js Replace the code in your src/App.js with the code below.\nimport './App.css'; import firebaseConfig from \"./firebaseConfig.json\"; import { pathnames, AppTemplate, AuthProvider, AuthRoutes, MainMenu, PublicTemplate, ResetPassword, SignIn, SignUp, UserMenu, UserProfile, UserUpdateEmail, UserUpdateName, UserUpdatePassword, UserDelete, FireactProvider, ActionPages } from '@fireactjs/core'; import { BrowserRouter, Routes } from \"react-router-dom\"; import { Route } from \"react-router-dom\"; import LocalFireDepartmentIcon from '@mui/icons-material/LocalFireDepartment'; import { CircularProgress, Box } from '@mui/material'; import authMethods from \"./authMethods.json\"; import { CreateSubscription, ListSubscriptions, pathnames as subPathnames, PermissionRouter, Settings, SubscriptionMenu, ListUsers, SubscriptionProvider, ListInvoices, ManagePaymentMethods, ChangePlan, CancelSubscription } from '@fireactjs/saas'; import SaaSConfig from './config.json'; const Brand = \"FIREACT\"; const Logo = ({size, color}) =\u003e { const logoColor = color || 'warning'; return ( \u003cLocalFireDepartmentIcon color={logoColor} fontSize={size} /\u003e ); } const Loader = ({size}) =\u003e { let cpSize = \"35px\"; switch(size){ case \"small\": cpSize = \"30px\"; break; case \"medium\": cpSize = \"35px\"; break; case \"large\": cpSize = \"45px\"; break; default: cpSize = \"35px\"; break; } return ( \u003cBox sx={{ display: 'flex', justifyContent: \"center\", alignItems: \"center\"}}\u003e \u003cCircularProgress color=\"warning\" size={cpSize} /\u003e \u003cdiv style={{position: \"absolute\" }}\u003e \u003cLogo size={size} /\u003e \u003c/div\u003e \u003c/Box\u003e ); } function App() { // merge pathnames for(var key in subPathnames){ pathnames[key] = subPathnames[key]; } const config = { firebaseConfig: firebaseConfig, brand: \"FIREACTJS\", pathnames: pathnames, authProviders: authMethods, saas: SaaSConfig } return ( \u003cFireactProvider config={config}\u003e \u003cAuthProvider firebaseConfig={firebaseConfig} brand={Brand}\u003e \u003cBrowserRouter\u003e \u003cRoutes\u003e \u003cRoute element={\u003cAuthRoutes loader={\u003cLoader size=\"large\" /\u003e} /\u003e} \u003e \u003cRoute element={\u003cAppTemplate logo={\u003cLogo size=\"large\" /\u003e} toolBarMenu={\u003cUserMenu /\u003e} drawerMenu={\u003cMainMenu /\u003e} /\u003e}\u003e \u003cRoute exact path={pathnames.ListSubscriptions} element={\u003cListSubscriptions loader={\u003cLoader size=\"large\" /\u003e} /\u003e} /\u003e \u003cRoute exact path={pathnames.CreateSubscription} element={\u003cCreateSubscription /\u003e} /\u003e \u003cRoute exact path={pathnames.UserProfile} element={\u003cUserProfile /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdateEmail} element={\u003cUserUpdateEmail /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdateName} element={\u003cUserUpdateName /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdatePassword} element={\u003cUserUpdatePassword /\u003e} /\u003e \u003cRoute exact path={pathnames.UserDelete} element={\u003cUserDelete /\u003e} /\u003e \u003c/Route\u003e \u003cRoute path={pathnames.Subscription} element={\u003cSubscriptionProvider loader={\u003cLoader size=\"large\" /\u003e} /\u003e} \u003e \u003cRoute element={\u003cAppTemplate logo={\u003cLogo size=\"large\" /\u003e} toolBarMenu={\u003cUserMenu /\u003e} drawerMenu={\u003cSubscriptionMenu /\u003e} /\u003e}\u003e \u003cRoute element={\u003cPermissionRouter permissions={[\"access\"]} /\u003e} \u003e \u003cRoute exact path={pathnames.Subscription+\"/\"} element={\u003cdiv\u003eHome\u003c/div\u003e} /\u003e \u003c/Route\u003e \u003cRoute element={\u003cPermissionRouter permissions={[\"admin\"]} /\u003e} \u003e \u003cRoute exact path={pathnames.Settings} element={\u003cSettings loader={\u003cLoader size=\"large\" /\u003e} /\u003e} /\u003e \u003cRoute exact path={pathnames.ListUsers} element={\u003cListUsers loader={\u003cLoader size=\"large\" /\u003e} /\u003e} /\u003e \u003cRoute exact path={pathnames.ListInvoices} element={\u003cListInvoices loader={\u003cLoader size=\"large\" /\u003e} /\u003e} /\u003e \u003cRoute exact path={pathnames.ManagePaymentMethods} element={\u003cManagePaymentMethods loader={\u003cLoader size=\"large\" /\u003e} /\u003e} /\u003e \u003cRoute exact path={pathnames.ChangePlan} element={\u003cChangePlan /\u003e} /\u003e \u003cRoute exact path={pathnames.CancelSubscription} element={\u003cCancelSubscription /\u003e} /\u003e \u003c/Route\u003e \u003c/Route\u003e \u003c/Route\u003e \u003c/Route\u003e \u003cRoute element={\u003cPublicTemplate /\u003e}\u003e \u003cRoute path={pathnames.SignIn} element={ \u003cSignIn logo={\u003cLogo size=\"large\" /\u003e} /\u003e } /\u003e \u003cRoute path={pathnames.SignUp} element={ \u003cSignUp logo={\u003cLogo size=\"large\" /\u003e} /\u003e } /\u003e \u003cRoute path={pathnames.ResetPassword} element={ \u003cResetPassword logo={\u003cLogo size=\"large\" /\u003e} /\u003e } /\u003e \u003cRoute path={pathnames.ActionPages} element={ \u003cActionPages logo={\u003cLogo size=\"large\" /\u003e} /\u003e } /\u003e \u003c/Route\u003e \u003c/Routes\u003e \u003c/BrowserRouter\u003e \u003c/AuthProvider\u003e \u003c/FireactProvider\u003e ) } export default App; Modify /functions/index.js Replace the code in your /functions/index.js with the following code.\nconst admin = require('firebase-admin'); admin.initializeApp(); const config = require('./config.json'); const functions = require('firebase-functions'); let fireactjsSaasFunctions = require('@fireactjs/saas-cloud-functions')({config: config, admin: admin, functions: functions}); exports.fireactjsSaas = fireactjsSaasFunctions; Run your app locally By now, your app is ready for the first run locally. Use the command npm start to start the app.\nDeploy to Firebase After testing locally, your app is ready to be deployed to Firebase hosting.\nBuild Run npm run build to build your app\nDeploy Run firebase deploy to deploy your app to Firebase. If you see a blank screen in your production URL, make sure you set the build as the folder in your Firebase settings.\n","categories":"","description":"Instructions for installing Fireactjs SaaS packages and creating your Reactjs SaaS application with the Fireactjs packages.\n","excerpt":"Instructions for installing Fireactjs SaaS packages and creating your Reactjs SaaS application with the Fireactjs packages.\n","ref":"/docs/saas-package/installation/","tags":"","title":"Installation"},{"body":"What is Fireactjs Fireactjs is an open-source framework for building SaaS and user portals with Firebase and Reactjs. The framework is designed to be component-based, so it can be extensible and customizable by adding or replacing custom-built components.\nWhy Fireactjs Open source Fireactjs is an open-source project for developers to use for free without worries, and join the community to learn together. Extensible and customizable Fireactjs is designed as component-based so that you can easily extend and customize the features with your own components. Accelerate development Fireactjs is very simple to setup to help you accelerate your development by skipping the development work of fundamental functionalities such as user authentication. Major Features The major features of Fireactjs include:\nSupport email and password sign-in Support single-sign-on including Google, Facebook, Microsoft, Github, Twitter and Apple Key user profile functionalities including updating email, password, etc Integration with Firebase Extensible and customizable framework architecture ","categories":"","description":"Fireactjs is a fully customizable open-source framework for building SaaS and user portals with Firebase and Reactjs.\n","excerpt":"Fireactjs is a fully customizable open-source framework for building SaaS and user portals with Firebase and Reactjs.\n","ref":"/docs/overview/","tags":"","title":"Overview"},{"body":" Packages\nHere is a list of the Fireactjs project npm packages\nEnjoy building!\n@fireactjs/core @fireactjs/core is the core package for building web applications with Firebase and Reactjs in a simple and fast approach.\nnpm package | Github | Documentation | Live Demo @fireactjs/saas @fireactjs/saas is the extension package of @fireactjs/core for building SaaS web applications with Firebase, Reactjs and Stripe in a simple and fast approach.\nnpm package | Github | Documentation | Live Demo ","categories":"","description":"","excerpt":" Packages\nHere is a list of the Fireactjs project npm packages\nEnjoy building!\n@fireactjs/core @fireactjs/core is the core package for building web applications with Firebase and Reactjs in a simple …","ref":"/packages/","tags":"","title":"Fireactjs Packages"},{"body":"Overview This is the component to list the invoices of the subscription account. It also links to Update Payment Method, Change Plan and Cancel Subscription features.\nScreenshot Props Prop Name Description loader This is the loader component to be displayed when the application is loading the invoice data Source Code https://github.com/fireactjs/saas/blob/main/dist/components/ListInvoices.js\n","categories":"","description":"The component lists the invoices of the subscription account.\n","excerpt":"The component lists the invoices of the subscription account.\n","ref":"/docs/saas-package/components/listinvoices/","tags":"","title":"ListInvoices"},{"body":"Overview AuthRoutes is the component to check the current user sign-in state. If the user’s authUser.checked is false, it will show a loading screen with the \u003cLoader /\u003e component. Once the user’s sign-in state is checked, which means authUser.checked is true, it will either redirect the user to the sign-in page when the user hasn’t signed in or show the nested React routes.\nProps Prop Name Description loader This is the loader component to be displayed when the application is loading user sign-in state data Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/Auth.js\n","categories":"","description":"The route component checks user sign-in state and redirect users to the sign-in page if they haven’t signed in.\n","excerpt":"The route component checks user sign-in state and redirect users to the sign-in page if they haven’t signed in.\n","ref":"/docs/core-package/components/authroutes/","tags":"","title":"AuthRoutes"},{"body":"Overview This component lists the subscription accounts the current user has access. It also links to the feature to create a new subscription account.\nScreenshot Props Prop Name Description loader This is the loader component to be displayed when the application is loading the subscriptions data Source Code https://github.com/fireactjs/saas/blob/main/dist/components/ListSubscriptions.js\n","categories":"","description":"The component lists the subscription accounts the current user has access.\n","excerpt":"The component lists the subscription accounts the current user has access.\n","ref":"/docs/saas-package/components/listsubscriptions/","tags":"","title":"ListSubscriptions"},{"body":"Overview FireactProvider is an invisible component to wrap the whole application to provide the framework configurations via a context variable config. You can extend the config JSON object by attaching new properties to it.\nAt a minimum, the framework expects the config JSON contains the following properties:\nfirebaseConfig - the configurations of your Firebase project brand - the brand name of your project pathnames - the components and their path names as described above authProviders - the configurations of the authentication providers Context Variables The context variables AuthProvider offers to the children components.\nProp Name Description config The framework configurations including firebaseConfig, brand, pathnames and authProviders. Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/Fireact.js\n","categories":"","description":"This component provides the framework configurations via a context variable config.\n","excerpt":"This component provides the framework configurations via a context variable config.\n","ref":"/docs/core-package/components/fireactprovider/","tags":"","title":"FireactProvider"},{"body":"Overview This component lists the users of the subscription account, including the pending users who are invited to the account. It links to the Invite User feature.\nProps Prop Name Description loader This is the loader component to be displayed when the application is loading the user data Source Code https://github.com/fireactjs/saas/blob/main/dist/components/ListUsers.js\n","categories":"","description":"The component lists the users of the subscription account including the pending users.\n","excerpt":"The component lists the users of the subscription account including the pending users.\n","ref":"/docs/saas-package/components/listusers/","tags":"","title":"ListUsers"},{"body":"","categories":"","description":"The components are building blocks of the Fireactjs framework.\n","excerpt":"The components are building blocks of the Fireactjs framework.\n","ref":"/docs/core-package/components/","tags":"","title":"Components"},{"body":"","categories":"","description":"The components are building blocks of the Fireactjs SaaS framework.\n","excerpt":"The components are building blocks of the Fireactjs SaaS framework.\n","ref":"/docs/saas-package/components/","tags":"","title":"Components"},{"body":"","categories":"","description":"Documentation and usage guides on how to develop web applications with Fireactjs.\n","excerpt":"Documentation and usage guides on how to develop web applications with Fireactjs.\n","ref":"/docs/","tags":"","title":"Fireactjs Documentation"},{"body":"Overview This is the component to list the existing payment methods of the user. Click “Set Default” to attach the payment method to the current subscription account. Click “Remove” to remove the payment method from the user. If the payment method is attached to a subscription account, removal will return an error.\nAdd payment method feature will load the PaymentMethodForm component to add a new payment method and attach it to the current subscription account.\nScreenshot Props Prop Name Description loader This is the loader component to be displayed when the application is loading the payment methods data Source Code https://github.com/fireactjs/saas/blob/main/dist/components/ManagePaymentMethods.js\n","categories":"","description":"The component lists the subscription accounts the current user has access.\n","excerpt":"The component lists the subscription accounts the current user has access.\n","ref":"/docs/saas-package/components/managepaymentmethods/","tags":"","title":"ManagePaymentMethods"},{"body":"Fireactjs is built with Firebase, Reactjs and Material UI. This guide is written to outline what concepts and technology the documentation assumes that you have knowledge of, and the depth of that knowledge, as well as provide resources to help fill those knowledge gaps.\nReactjs Development knowledge of Reactjs is required to be able to customize or extend the framework for your project. If you are not familiar with Reactjs, we recommend you have knowledge in the following areas before getting started with Fireacjs:\nReactjs components Context variables React Router DOM v6 Firebase Firebase knowledge is nice to have because Fireactjs is built to be hosted on Firebase. If you are not familiar with Firebase, we recommend you to learn about the following areas:\nFirebase tools CLI Firebase authentication Firestore Firebase hosting Material UI Material UI knowledge is nice to have if you want to develop your own components to customize or extend the framework for your project. However, you could use other UI libraries if you like.\n","categories":"","description":"Foundational knowledge you should know before starting working with Fireactjs.\n","excerpt":"Foundational knowledge you should know before starting working with Fireactjs.\n","ref":"/docs/prerequisite-knowledge/","tags":"","title":"Prerequisite Knowledge"},{"body":"Overview This component checks whether the current user has permissions in the permissions prop. It is designed to be used with the \u003cRoute /\u003e component as the parent route of nested routes. For example, the code below will make the nested route only accessible for the access permission role.\n\u003cRoute element={\u003cPermissionRouter permissions={[\"access\"]} /\u003e} \u003e \u003cRoute exact path={pathnames.Subscription+\"/\"} element={\u003cdiv\u003eHome\u003c/div\u003e} /\u003e \u003c/Route\u003e Props Prop Name Description permissions This is an array of the permission roles that are allowed for the route. Source Code https://github.com/fireactjs/saas/blob/main/dist/components/PermissionRouter.js\n","categories":"","description":"The component to check user permission roles.\n","excerpt":"The component to check user permission roles.\n","ref":"/docs/saas-package/components/permissionrouter/","tags":"","title":"PermissionRouter"},{"body":"Overview MainMenu is the component to display the menu in the left sidebar of the application layout. By default, it contains two menu items: Application Home and User Profile. You can extend the menu by replacing the component with your own component.\nScreenshot Props Prop Name Description customItems An array of menu item elements to be inserted between Home and My Profile options. Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/menus/MainMenu.js\n","categories":"","description":"The main menu component for the application layout.\n","excerpt":"The main menu component for the application layout.\n","ref":"/docs/core-package/components/mainmenu/","tags":"","title":"MainMenu"},{"body":"Overview This component is designed to be the component to change the subscription account settings. The component updates the subscription account name. When you build your SaaS application, you should replace this component with your own custom build component if the subscription settings are more than just the account name. For example, if your SaaS is a no-code web application builder, you might have other settings such as domain.\nScreenshot Source Code https://github.com/fireactjs/saas/blob/main/dist/components/Settings.js\n","categories":"","description":"The component to change the subscription account settings.\n","excerpt":"The component to change the subscription account settings.\n","ref":"/docs/saas-package/components/settings/","tags":"","title":"Settings"},{"body":"Overview This is the context component to access the subscription account data. See the following example code on how to access the subscription account data.\nconst { subscription } = useContext(SubscriptionContext); const accountName = subscription.name?subscription.name:\"\"; Source Code https://github.com/fireactjs/saas/blob/main/dist/components/SubscriptionContext.js\n","categories":"","description":"The component to access the subscription account data.\n","excerpt":"The component to access the subscription account data.\n","ref":"/docs/saas-package/components/subscriptioncontext/","tags":"","title":"SubscriptionContext"},{"body":"To add features to your application based on Fireactjs, you will need to develop your Reactjs components and attach them to the application routes.\nReplacing an existing route feature When you setup your application based on Fireactjs, the homepage of the application is blank. That is because the element of the homepage / route is simply a React fragment as in the example code below.\n\u003cRoute exact path=\"/\" element={\u003c\u003e\u003c/\u003e} /\u003e If you replace the React fragment with your own component, you can control the functionality of the homepage.\nAdding new routes The features of your web application may need more than the homepage route. You can add more routes similar to the homepage route to extend the application.\nIt is important that you add your new routes to the pathnames.json file instead of hard coding them in the App.js so that your users can navigate between the components without broken links when some routes are updated.\nIf you need to add the new routes to the main menu or the user menu, please read the components’ documents.\nUsing authUser context variable In your components, you can use the authUser context variable to retrieve user data and store user data. The current user’s information is under authUser.user JSON. Here is a list of the key properties of the current user.\nName - authUser.user.displayName Email - authUser.user.email User ID - authUser.user.uid Email verified - authUser.user.emailVerified Avatar - authUser.user.photoURL Below is an example to display the user info in a component called MyComponent\nimport React from \"react\"; import { AuthContext } from \"@fireactjs/core\"; export const MyComponent = () =\u003e { return ( \u003cAuthContext.Consumer\u003e {context =\u003e ( \u003cdiv\u003e \u003cp\u003eUser ID: {context.authUser.user.uid}\u003c/p\u003e \u003cp\u003eName: {context.authUser.user.displayName}\u003c/p\u003e \u003cp\u003eEmail: {context.authUser.user.email}\u003c/p\u003e \u003cp\u003eVerified: {context.authUser.user.emailVerified?\"Yes\":\"No\"}\u003c/p\u003e \u003cp\u003eAvatar URL: {context.authUser.user.photoURL}\u003c/p\u003e \u003c/div\u003e )} \u003c/AuthContext.Consumer\u003e ) } Replace the React fragment of the homepage route as in the example below, and you will be able to show the current user info on the homepage.\n\u003cRoute exact path=\"/\" element={\u003cMyComponent /\u003e} /\u003e Storing data to the authUser context variable In your application, you can store data for the current user in the authUser context variable. The [authUser.data](http://authUser.data) is designed for the purpose.\nconst {setAuthUser} = useContext(AuthContext); setAuthUser(prevState =\u003e ({ ...prevState, data: { prop1: 'test' } })); ","categories":"","description":"Develop your components to add features to your Fireactjs application.\n","excerpt":"Develop your components to add features to your Fireactjs application.\n","ref":"/docs/core-package/development/","tags":"","title":"Development"},{"body":"Overview PublicTemplate is a layout component to control the look and feel of the public pages for the sign-in and sign-up processes. It displays the content in the centre of the page layout.\nSource Code https://github.com/fireactjs/core/blob/main/src/lib/components/templates/PublicTemplate.js\n","categories":"","description":"The template layout for the public pages including Sign-In, Sign-Up etc.\n","excerpt":"The template layout for the public pages including Sign-In, Sign-Up etc.\n","ref":"/docs/core-package/components/publictemplate/","tags":"","title":"PublicTemplate"},{"body":"Overview This is the menu component to display the main menu for the subscription account. By default, it contains Dashboard, Settings, Users and Billing. You can add other menu item components by adding them to the customItems prop.\nScreenshot Props Prop Name Description customItems custom menu item components to be inserted between Dashboard and Settings Source Code https://github.com/fireactjs/saas/blob/main/dist/components/SubscriptionMenu.js\n","categories":"","description":"The component to display the subscription account menu.\n","excerpt":"The component to display the subscription account menu.\n","ref":"/docs/saas-package/components/subscriptionmenu/","tags":"","title":"SubscriptionMenu"},{"body":"Overview This component is the context provider to load the subscription account data. The subscription account data is accessible to all the nested elements so that the subscription data is only loaded once.\n\u003cRoute path={pathnames.Subscription} element={\u003cSubscriptionProvider loader={\u003cLoader size=\"large\" /\u003e} /\u003e} \u003e ... \u003c/Route\u003e Props Prop Name Description loader This is the loader component to be displayed when the application is loading the subscription account data Source Code https://github.com/fireactjs/saas/blob/main/dist/components/SubscriptionContext.js\n","categories":"","description":"The component loads the subscription data as a context.\n","excerpt":"The component loads the subscription data as a context.\n","ref":"/docs/saas-package/components/subscriptionprovider/","tags":"","title":"SubscriptionProvider"},{"body":"Overview ResetPassword is a form component for users to input their emails to request a password reset. The form will trigger the reset password process in Firebase Authentication. There is a rate limit enforced by Firebase so that it won’t be used to spam users.\nScreenshot Props Prop Name Description logo This is the logo component to be displayed at the top of the form Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/auth/ResetPassword.js\n","categories":"","description":"The form for users to request a password reset.\n","excerpt":"The form for users to request a password reset.\n","ref":"/docs/core-package/components/resetpassword/","tags":"","title":"ResetPassword"},{"body":"Overview This component displays a form to allow the admins of the subscription account to update the permissions of a user, or revoke access of the user.\nProps Prop Name Description user The user object to be updated setSelectedUser The state of UpdateUser component is loaded in the parent component. Set false to unload the component. setUsers The state of the user list in the parent component. After a user is invited, the user will be appended to the users state. Source Code https://github.com/fireactjs/saas/blob/main/dist/components/UpdateUser.js\n","categories":"","description":"The component to update the permissions of a user.\n","excerpt":"The component to update the permissions of a user.\n","ref":"/docs/saas-package/components/updateuser/","tags":"","title":"UpdateUser"},{"body":"Overview Fireactjs is a component-based framework. That means all the out-of-the-box features are delivered as components, and you can add components to extend or swap components to customize the web application that you are building based on the framework.\nYou can find all the key components that are shipped with the framework in the example src/App.js file in the demo repo here:\nfunction App() { const config = { firebaseConfig: firebaseConfig, brand: \"FIREACTJS\", pathnames: pathnames, authProviders: authMethods } return ( \u003cFireactProvider config={config}\u003e \u003cAuthProvider\u003e \u003cBrowserRouter\u003e \u003cRoutes\u003e \u003cRoute element={\u003cAuthRoutes loader={\u003cLoader size=\"large\" /\u003e} /\u003e} \u003e \u003cRoute element={\u003cAppTemplate logo={\u003cLogo size=\"large\" /\u003e} toolBarMenu={\u003cUserMenu /\u003e} drawerMenu={\u003cMainMenu /\u003e} /\u003e}\u003e \u003cRoute exact path=\"/\" element={\u003c\u003e\u003c/\u003e} /\u003e \u003cRoute exact path={pathnames.UserProfile} element={\u003cUserProfile /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdateEmail} element={\u003cUserUpdateEmail /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdateName} element={\u003cUserUpdateName /\u003e} /\u003e \u003cRoute exact path={pathnames.UserUpdatePassword} element={\u003cUserUpdatePassword /\u003e} /\u003e \u003cRoute exact path={pathnames.UserDelete} element={\u003cUserDelete /\u003e} /\u003e \u003c/Route\u003e \u003c/Route\u003e \u003cRoute element={\u003cPublicTemplate /\u003e}\u003e \u003cRoute path={pathnames.SignIn} element={ \u003cSignIn logo={\u003cLogo size=\"large\" /\u003e} /\u003e } /\u003e \u003cRoute path={pathnames.SignUp} element={ \u003cSignUp logo={\u003cLogo size=\"large\" /\u003e} /\u003e } /\u003e \u003cRoute path={pathnames.ResetPassword} element={ \u003cResetPassword logo={\u003cLogo size=\"large\" /\u003e} /\u003e } /\u003e \u003c/Route\u003e \u003c/Routes\u003e \u003c/BrowserRouter\u003e \u003c/AuthProvider\u003e \u003c/FireactProvider\u003e ) } Authentication Components At the top level, the \u003cAuthProvider /\u003e component manages the authentication state with a context variable called authUser. This variable tells the system if the current user has signed in or not as well as the relevant data about the user.\nRoutes Within the \u003cAuthProvider /\u003e component are routes for your application. It is important to have a good understanding of React Router. There are two kinds of routes you will find: the layout routes without the path prop and the page routes with the path prop.\nAll the pages that only authenticated users can access should be placed under the route of the \u003cAuthRoutes /\u003e component. And within the component, you can have template routes to control the look and feel of your application. The \u003cAppTemplate /\u003e component is an example.\nOutside of the \u003cAuthRoutes /\u003e component are the pages that the users can access without authentication, such as the sign-in page, the sign-up page, etc. They can have their own templates similar to the authenticated pages. The \u003cPublicTemplate /\u003e component is an example.\nPage components Each route mapping to a page requires a visual component for its element prop. For example, the \u003cUserProfle /\u003e component shows the user profile details. You can add new routes for new pages and features of your application, or swap the existing routes with your custom-built components to change their functionality.\nPathnames Within the page components, there are links between the pages to build a smooth user flow experience. It’s important that the page components know how to link with each other, and that is the purpose of the pathnames.json file. This file defines all the page components and their URL path names as a JSON file.\nHere is an example of the default pathnames.json file from the framework.\n{ \"ResetPassword\": \"/reset-password\", \"SignIn\": \"/sign-in\", \"SignUp\": \"/sign-up\", \"UserDelete\": \"/user/delete\", \"UserProfile\": \"/user\", \"UserUpdateEmail\": \"/user/update-email\", \"UserUpdateName\": \"/user/update-name\", \"UserUpdatePassword\": \"/user/update-password\" } FireactProvider component This is the component to provide the configurations as a context variable. The config property is a JSON object that you can extend its properties. At a minimum, the config JSON object must contain the following properties:\nfirebaseConfig - the configurations of your Firebase project brand - the brand name of your project pathnames - the components and their path names as described above authProviders - the configurations of the authentication providers ","categories":"","description":"Fireactjs is designed to be extensible and customizable with its framework architecture.\n","excerpt":"Fireactjs is designed to be extensible and customizable with its framework architecture.\n","ref":"/docs/framework-architecture/","tags":"","title":"Framework Architecture"},{"body":" Showcases\nSee applications that are built based on Fireactjs\nShow off your project by creating a new post in Show and tell\nFireactjs Core Demo Fireactjs is an open-source framework for building SaaS and user portals with Firebase and Reactjs. This is the demo site of the @fireactjs/core package.\nVisit Demo Fireactjs SaaS Demo Fireactjs is an open-source framework for building SaaS and user portals with Firebase and Reactjs. This is the SaaS demo site of the @fireactjs/saas package.\nVisit Demo VisitorAPI VisitorAPI is a fast and reliable API to detect visitor location and device info. Simple to implement with JavaScript and Google Tag Manager.\nVisit Website ","categories":"","description":"","excerpt":" Showcases\nSee applications that are built based on Fireactjs\nShow off your project by creating a new post in Show and tell\nFireactjs Core Demo Fireactjs is an open-source framework for building SaaS …","ref":"/showcases/","tags":"","title":"Fireactjs Showcases"},{"body":"Overview SignIn is a form component for users to sign in to the application via email and password or one of the enabled single sign-on methods. It shows the single sign-on buttons based on the provider JSON. Once the user signs in successfully, it will redirect the user to the successUrl or the URL pathname in the re parameter.\nScreenshot Props Prop Name Description logo This is the logo component to be displayed at the top of the form successUrl The URL to redirect users to after signing in, if no re parameter is provided in the URL Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/auth/SignIn.js\n","categories":"","description":"The form for users to sign in to the application.\n","excerpt":"The form for users to sign in to the application.\n","ref":"/docs/core-package/components/signin/","tags":"","title":"SignIn"},{"body":"Overview SignUp is the form component for users to sign up for new accounts with email and password. It requires email, full name and password to sign up.\nScreenshot Props Prop Name Description logo This is the logo component to be displayed at the top of the form successUrl The URL to redirect users to after signing up. If no successUrl is provided, the sign up process will redirect users back to the homepage after signing up. Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/auth/SignUp.js\n","categories":"","description":"The form for users to sign up using email and password.\n","excerpt":"The form for users to sign up using email and password.\n","ref":"/docs/core-package/components/signup/","tags":"","title":"SignUp"},{"body":"","categories":"","description":"@fireactjs/core is the core package of the Fireactjs framework.\n","excerpt":"@fireactjs/core is the core package of the Fireactjs framework.\n","ref":"/docs/core-package/","tags":"","title":"@fireactjs/core Package"},{"body":" Join the Fireactjs community\nFireactjs is an open-source project that everyone in the community can use, learn from and contribute to. We would love you to join us. Here are a few ways to join the community.\nDiscussions Provide feedback to the community. Ask questions and answer questions from other community members.\nRead more\nShowcase We love to see your cool work based on Fireactjs. Submit your web application that is built based on Fireactjs.\nRead more\nGithub Report issues or contribute code to improve the project. Visit the Github repo of the project.\nRead more\nContributors Chaoming Li ","categories":"","description":"","excerpt":" Join the Fireactjs community\nFireactjs is an open-source project that everyone in the community can use, learn from and contribute to. We would love you to join us. Here are a few ways to join the …","ref":"/community/","tags":"","title":"Fireactjs Community"},{"body":"Overview UserDelete is a form component for the current user to delete their account. It is linked from the UserProfile component. After the account is successfully deleted, the user will no longer be in the signed-in state and will be redirected back to the homepage.\nScreenshot Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/user/UserDelete.js\n","categories":"","description":"The form component for deleting the current user account.\n","excerpt":"The form component for deleting the current user account.\n","ref":"/docs/core-package/components/userdelete/","tags":"","title":"UserDelete"},{"body":"Overview UserMenu is the menu at the top-right of the toolbar for the current user to manage their profile and sign out. It can be customized by inserting additional menu items as customItems prop. You can also replace it with your own menu component.\nScreenshot Props Prop Name Description customItems An array of menu item elements to be inserted between Profile and Sign Out options. Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/menus/UserMenu.js\n","categories":"","description":"The menu component displays the user action menu at the top-right of the toolbar.\n","excerpt":"The menu component displays the user action menu at the top-right of the toolbar.\n","ref":"/docs/core-package/components/usermenu/","tags":"","title":"UserMenu"},{"body":"Overview UserProfile is a component to display the user profile information such as avatar, email and name, and to link to the profile management features for updating email, name and password. It also shows if the email is verified. When the user’s email is unverified, the user can click on the item to trigger a verification email.\nScreenshot Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/user/UserProfile.js\n","categories":"","description":"The component displays the profile of the current user and links to user profile management features.\n","excerpt":"The component displays the profile of the current user and links to user profile management features.\n","ref":"/docs/core-package/components/userprofile/","tags":"","title":"UserProfile"},{"body":"Overview UserUpdateEmail is a form component for the current user to update their email address. It is linked from the UserProfile component.\nScreenshot Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/user/UserUpdateEmail.js\n","categories":"","description":"The form component for updating email addresses.\n","excerpt":"The form component for updating email addresses.\n","ref":"/docs/core-package/components/userupdateemail/","tags":"","title":"UserUpdateEmail"},{"body":"Overview UserUpdateName is a form component for the current user to update their full name. It is linked from the UserProfile component.\nScreenshot Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/user/UserUpdateName.js\n","categories":"","description":"The form component for updating names.\n","excerpt":"The form component for updating names.\n","ref":"/docs/core-package/components/userupdatename/","tags":"","title":"UserUpdateName"},{"body":"Overview UserUpdatePassword is a form component for the current user to update their password. It is linked from the UserProfile component.\nScreenshot Source Code https://github.com/fireactjs/core/blob/main/src/lib/components/user/UserUpdatePassword.js\n","categories":"","description":"The form component for updating passwords.\n","excerpt":"The form component for updating passwords.\n","ref":"/docs/core-package/components/userupdatepassword/","tags":"","title":"UserUpdatePassword"},{"body":"","categories":"","description":"@fireactjs/saas is the package to convert a Fireactjs application to an SaaS application with Stripe integration.\n","excerpt":"@fireactjs/saas is the package to convert a Fireactjs application to an SaaS application with Stripe integration.\n","ref":"/docs/saas-package/","tags":"","title":"@fireactjs/saas Package"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":" Fireactjs Firebase + Reactjs + Stripe\nThe fully customizable open-source framework for building SaaS and user portals with Firebase + Reactjs + Stripe\nImportant Notice: This project has been replaced by fireact.dev Get Started   Live Demos What is Fireactjs?\nFireactjs is an open-source framework for building SaaS and user portals with Firebase and Reactjs. The framework is designed to be component-based, so it can be extensible and customizable by adding or replacing custom-built components.\nOpen source Fireactjs is an open-source project for developers to use for free without worries, and join the community to learn together.\nExtensible and customizable Fireactjs is designed as component-based so that you can easily extend and customize the features with your own components.\nAccelerate development Fireactjs is very simple to setup to help you accelerate your development by skipping the development work of fundamental functionalities such as user authentication.\nGet Started   Live Demos ","categories":"","description":"","excerpt":" Fireactjs Firebase + Reactjs + Stripe\nThe fully customizable open-source framework for building SaaS and user portals with Firebase + Reactjs + Stripe\nImportant Notice: This project has been replaced …","ref":"/","tags":"","title":"Fireactjs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"}]